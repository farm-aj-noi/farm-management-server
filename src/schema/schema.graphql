type Query {
  user: User
  users: [User]!
  user2(id: ID!): User
  product(id: ID!): Product
  Cowdetail(id: ID!): Imslaughter
  CowWaitting(id: ID!): Importcowfarm
  productSearch(description: String, price: Float): [Product]
  products: [Product]!
  postsOffset(limit: Int!, offset: Int!): [Product!]!
  get_provinces: [Ad_provinces]
  get_amphures(province_id: String): [Ad_amphures]
  get_districts(province_id: String, amphur_id: String): [Ad_districts]
  get_zipcodes(district_code: String): [Ad_zipcodes]

  puntypeQuery: [PunType]!
  #งานจริงๆ
  Card1: [Imslaughter]!
  Card1_5: [Imslaughter]!
  Card2: [Halve]!
  Card3: [Quarter]!
  Card4: [Lump]!
  Card5: [Imslaughter]!
  Card6: [Imslaughter]!

  Cardtreat: [Imslaughter]!
  Cardregis: [Imslaughter]!
  CardWaitting: [Importcowfarm]!
  statusSearch: [Status]!
  boxSearch: [Box]!
  beeftypeSearch: [Beeftype]!
  Allcow: [Imslaughter]!
  cowfarmmerweitting(passsport: String!, statusIm: String): [Importcowfarm]!
  cowfarmmer(numkun: String, passsport: String!): [Imslaughter]!
  imslaughtersSearch: [Imslaughter]!
  importcowfarmSearch: [Importcowfarm]!
  treatSearch: [Imslaughter]!
  imslaughtersSearchNumkun(
    importDate: String
    numkun: String
    statusIm: String
  ): [Imslaughter]!
  imslaughtersSearchList(
    importslaughterDate: String
    statusCa: String
  ): [Imslaughter]!
  imslaughtersSearchHalve(
    numkun: String
    importslaughterDate: String
    statusCa: String
  ): [Imslaughter]!
  imslaughtersSearchGrade(
    numkun: String
    importslaughterDate: String
    statusCa: String
  ): [Imslaughter]!
  imslaughtersSearchEntrails(
    numkun: String
    importslaughterDate: String
    statusEn: String
  ): [Imslaughter]!
  SearchHalveForSent(
    barcode: String
    createdAt: String
    status: String
  ): [Halve]!
  SearchHalveForCut(
    barcode: String
    sendAt: String
    status: String
    beeftype: String
  ): [Halve]!
  Selectslaugerfarm(
    numkun: String
    statusIm: String
    passsport: String
  ): [Imslaughter]!
  Selecttreatfarm(
    numkun: String
    statusIm: String
    passsport: String
  ): [Imslaughter]!
  Selecttreat(numkun: String, statusIm: String): [Imslaughter]!
  selectFood(type: String): [Foodset]!
  selectFoodName(name: String): [Foodset]!
  HalveForCut(barcode: String): Halve

  SearchBeeftypefour(code: String): Beeftype

  SearchQuarter(halve: String): [Quarter]
  SearchQuarterForSent(barcode: String, createdAt: String): [Quarter]!
  SearchQuarterForCut(
    barcode: String
    sendAt: String
    status: String
  ): [Quarter]!
  QuarterForCut(barcode: String): Quarter

  SearchBeeftypeLump(code: String): Beeftype
  SearchBeeftypeLumpAll: [Beeftype]!

  SearchLump(quarter: String): [Lump]
  SearchLumpForSent(barcode: String, createdAt: String): [Lump]!
  SearchLumpForCut(barcode: String, sendAt: String, status: String): [Lump]!
  LumpForCut(barcode: String): Lump

  SearchChop(lump: String): [Chop]

  SearchBuy(fees: String, numkun: String): [Imslaughter]!
  Tracking(barcode: String): Tracking!
  Trackinginfo(numkun: String): Imslaughter
  Selectcow(numkun: String): [Imslaughter]!

  SlipChop(barcode: String): Chop
  SlipLump(barcode: String): Lump
  SlipQuarter(barcode: String): Quarter
  SlipHalve(barcode: String): Halve
  SettingBeeftype2: [Beeftype]!
  SettingBeeftype4: [Beeftype]!
  SettingBeeftype18: [Beeftype]!
  SettingBeeftypeCheck: [Beeftype]!

  trace(numkun: String): Imslaughter
  ReportgetTreat(startdate: String, enddate: String): [Imslaughter]!
  Reportgetin(startdate: String, enddate: String): [Imslaughter]!
  Reportdead(startdate: String, enddate: String): [Imslaughter]!
  Reportage(startdate: String, enddate: String): [Imslaughter]!

  ReportgetGroup(
    startdate: String
    enddate: String
    group: String
    district: String
    province: String
  ): [Imslaughter]!
  Reportim(startdate: String, enddate: String): [Imslaughter]!
  Reportcuttwo(startdate: String, enddate: String): [Halve]!
  Reportentrail(startdate: String, enddate: String): [Entrail]!
  Reportquarter(startdate: String, enddate: String): [Quarter]!
  Reportlump(startdate: String, enddate: String): [Lump]!
  Reportchop(startdate: String, enddate: String): [Chop]!

  toslaughter: [Imslaughter]!
  allDrug: [Drug]!
  allFood: [Foodset]!
  allFoodF2: [Foodset]!
  allDisease: [Disease]!
  showDayslaugh: [Dayslaugh]!
  # ////////////////////////////////////////////////
  datacow(id: ID!): Datacow
  datacows: [Datacow]!
  # datacow: (id: ID!): Datacow
  datatreat(id: ID!): Datatreat
  datatreats: [Datatreat]!
  # datatreat: (id: ID!): Datatreat
  # ////////////////////////////////////////////////

  liststore(beeftype: String, type: String): [List]
  listentrail: [EntrailList]

  imhalveSearch(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
  ): [Imhalve]!

  exporthalve(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
    exporter: String
  ): [Imhalve]

  imquartSearch(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
  ): [Imquarter]

  exportquart(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
    exporter: String
  ): [Imquarter]

  imlumpSearch(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
  ): [Imlump]

  exportlump(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
    exporter: String
  ): [Imlump]

  imchopSearch(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
  ): [Imchop]

  exportchop(
    startdate: String
    enddate: String
    beeftype: String
    namefarmer: String
    userName: String
    exporter: String
  ): [Imchop]

  imentrailSearch(
    startdate: String
    enddate: String
    namefarmer: String
    userName: String
  ): [Imentrail]

  exportentrail(
    startdate: String
    enddate: String
    namefarmer: String
    userName: String
    exporter: String
  ): [Imentrail]

  listchill(startdate: String, enddate: String, beeftype: String): [Chill]

  allRoom: [Beefroom]
  TypeRoom(beefroom: String): [Typekeep]
  listShelf(id: ID): [Shelf]
  roomsearch(id: ID): [Beefroom]

  allhalve(barcode: String): Halve

  listRequestEx: [RequestExport]

  listChillday: [Chillday]

  allBasket(id: ID): [Basket]
  Baskets: [Basket]

  Card8h(exp: String): [Imhalve]
  Card8q(exp: String): [Imquarter]
  Card8l(exp: String): [Imlump]
  Card8c(exp: String): [Imchop]
  Card8e(exp: String): [Imentrail]

  Card9: [RequestExport]

  Card10: [Chill]

  CardImh: [Imhalve]
  CardImq: [Imquarter]
  CardIml: [Imlump]
  CardImc: [Imchop]
  CardIme: [Imentrail]

  CardExh: [Imhalve]
  CardExq: [Imquarter]
  CardExl: [Imlump]
  CardExc: [Imchop]
  CardExe: [Imentrail]

  Totalexpdate: [TotalExpdate]
  listChillroom: [Chillroom]
  listExpSetting: [ExpdateSetting]
  # ///////////////////////////////////////////////////
  listunit: [Unit]

  allproducttype: [Producttype]
}

type Mutation {
  importcowfarm(
    pun: String
    numfarmer: String
    passport: String
    teeth: String
    bodyscore: String
    namefarmer: String
    date: String
    datebirhtday: String
    namecow: String
    sex: String
    weightstart: Float
    weightbirht: Float
    imagecow: String
    district: String
    province: String
    amphur: String
    zipcode: String
  ): Importcowfarm

  createFoodset(name: String, CP: Float, TDN: Float, type: String): [Foodset]!
  setmedi(name: String, dateStop: Float): SettingMedi
  signup(
    name: String!
    email: String!
    password: String!
    passsport: String!
    numaccount: String!
    district: String!
    province: String!
    amphur: String!
    zipcode: String!
  ): User
  login(email: String!, password: String!): AuthData
  requestResetPassword(email: String!): Message!
  resetPassword(password: String!, token: String!): Message
  createRole(nameTH: String!, nameEN: String!): Role
  createProduct(
    description: String!
    price: Float!
    imageUrl: String!
  ): Product!
  updateProduct(
    id: ID!
    description: String
    price: Float
    imageUrl: String
  ): Product!
  addToCart(id: ID!): CartItem!
  deleteCart(id: ID!): CartItem!
  createBox(name: String!): Box
  createBox2(name: String!): Box2

  createPun(name: String, numpun: String): PunType
  deleteDrug(id: ID!): Drug!

  #งานจริงๆ
  createsetting(dateResetCount: Int!): Setting
  createBeeftype(
    code: String!
    nameTH: String!
    nameEN: String!
    BBE: Int
    priceG2h: Float
    priceG3: Float
    priceG3h: Float
    priceG4: Float
    priceG4h: Float
    priceG5: Float
  ): Beeftype
  updateBeeftype(
    id: ID!
    code: String
    nameTH: String
    nameEN: String
    BBE: Int
    priceG2h: Float
    priceG3: Float
    priceG3h: Float
    priceG4: Float
    priceG4h: Float
    priceG5: Float
  ): Beeftype
  deleteBeeftype(id: ID!): Beeftype!
  updateTstatus(id: ID!, statuscow: String!): Imslaughter!
  updateDead(
    id: ID!
    statuscow: String!
    importDateDead: String
    notedead: String
  ): Imslaughter!
  createStatus(code: String!, nameTH: String!, nameEN: String!): Status!
  updateStatus(id: ID!, code: String, nameTH: String, nameEN: String): Status!
  deleteStatus(id: ID!): Status!

  createCow(
    statuscow: String
    numcow: String!
    numkun: String!
    pun: String!
    numfarmer: String!
    passport: String
    teeth: String
    rfid: String
    bodyscore: String
    namefarmer: String!
    date: String!
    datebirhtday: String!
    namecow: String!
    sex: String!
    weightstart: Float!
    weightbirht: Float!
    imagecow: String
    group: String!
    district: String!
    province: String!
  ): Imslaughter!
  deletecow(id: ID!): Imslaughter!
  createImslaughter(
    numcow: String!
    numkun: String!
    pun: String!
    numfarmer: String!
    namefarmer: String!
  ): Imslaughter!
  updateImslaughter(
    id: ID!
    namefarmer: String
    weight: Float
    price: Float
  ): Imslaughter!
  updatecowfarm(id: String!): Importcowfarm!

  updateImslaughterStatusCa(id: ID!): Imslaughter!
  updateImslaughterStatusEn(id: ID!): Imslaughter!
  updateGrade(id: ID!, grade: String!): Imslaughter!
  updateCow(
    id: String!
    numkun: String
    numcow: String
    namecow: String
    pun: String
    weightstart: Float
    numfarmer: String
  ): Imslaughter!
  updateDrug(id: String, dateStop: Int): Drug!
  deletePun(id: ID!): PunType!
  deleteGrade(id: ID!): Imslaughter!
  updateFees(id: ID!, fees: Float!): Imslaughter!
  updateStatustreat(id: ID!, statuscow: String!): Imslaughter!
  createHalve(
    weightwarm: Float!
    imslaughter: String!
    beeftype: String!
  ): Halve!
  createHalveL(weightwarm: Float!, imslaughter: String!): Halve!
  createHalveR(weightwarm: Float!, imslaughter: String!): Halve!
  updateHalve(id: ID!, weightwarm: Float, sendAt: String): Halve!
  deleteHalveSent(id: ID!): Halve!
  updateHalveWeightCool(id: ID!, weightcool: Float): Halve!

  createQuarter(
    weight: Float!
    imslaughter: String!
    beeftype: String!
    halve: String!
  ): Quarter!

  deleteQuarter(id: ID!): Quarter!
  updateQuarterSent(id: ID!, sendAt: String): Quarter!
  deleteQuarterSent(id: ID!): Quarter!

  createLump(
    weight: Float!
    imslaughter: String!
    beeftype: String!
    quarter: String!
  ): Lump!

  deleteLump(id: ID!): Lump!
  updateLumpSent(id: ID!, sendAt: String): Lump!
  deleteLumpSent(id: ID!): Lump!

  createChop(
    weight: Float!
    imslaughter: String!
    beeftype: String!
    lump: String!
  ): Chop!

  deleteChop(id: ID!): Chop!

  createEntrail(
    imslaughter: String!
    offal: String!
    toe: String!
    head: String!
    skin: String!
    liver: String!
    fat: String!
    onkale: String!
    tail: String!
    gallbladder: String!
    scrap: String!
  ): Entrail
  updateEntrail(
    id: ID!
    offal: String
    toe: String
    head: String
    skin: String
    liver: String
    fat: String
    onkale: String
    tail: String
    gallbladder: String
    scrap: String
  ): Entrail!

  toSlaughter(id: ID!, importDate: String): Imslaughter!
  createDayslaugh(year: Int, month: Int, weight: Float): Dayslaugh!
  updateDayslaugh(id: String, year: Int, month: Int, weight: Float): Dayslaugh!
  updateFoodset(
    id: String
    name: String
    TDN: Float
    CP: Float
    type: String
  ): Foodset!
  createFeed(
    datestart: String!
    dateend: String!
    typefood: String!
    namefood: String!
    namecop: String
    cp: Float
    tdn: Float
    quantity: Float!
    note: String
    imslaughter: String!
  ): Feed!

  createTreat(
    datet: String!
    dise: String!
    symptom: String!
    medi: String!
    nofity: Int
    quantity: Float!
    note: String
    importDate: String
    notedead: String
    imslaughter: String!
  ): Treat!

  createTransport(
    date: String
    name: String!
    place: String!
    note: String
    barcode: String!
  ): Transport!

  createDrug(name: String!, nofity: Int, dateStop: Int): Drug!

  createDisease(name: String!, detail: String!): Disease!
  # /////////////////////////////////////////////////////////////
  createDatacow(numkun: String!, numcow: String!): Datacow!

  createDatatreat(weight: String!, detail: String!): Datatreat!
  #//////////////////////////////////////////////////////////////

  createImHalve(
    barcode: String!
    beefstore: String!
    beefroom: String!
  ): Imhalve
  createImQuarter(
    barcode: String!
    beefstore: String!
    beefroom: String!
  ): Imquarter
  createImlump(
    barcode: String!
    beefstore: String!
    beefroom: String!
    shelf: String
    basket: String
  ): Imlump
  createImchop(
    barcode: String!
    beefstore: String!
    beefroom: String!
    shelf: String
    basket: String
  ): Imchop
  createImentrail(
    barcode: String!
    entrailstore: String!
    beefroom: String!
  ): Imentrail

  createBeefStore: BeefStore
  createEntrailStore: EntrailStore

  createChill(barcode: String, chillroom: String, chillday: String): Chill

  updateChillday(id: ID): Chill

  creatChillroom(roomnum: String): Chillroom

  createExporth(barcode: String, storestatus: String, exporter: String): Imhalve

  createExportq(
    barcode: String
    storestatus: String
    exporter: String
  ): Imquarter

  createExportl(barcode: String, storestatus: String, exporter: String): Imlump

  createExportc(barcode: String, storestatus: String, exporter: String): Imchop

  createExporte(
    barcode: String
    storestatus: String
    exporter: String
  ): Imentrail

  createRequestExport(
    name: String
    beeftype: String
    quantity: String
  ): RequestExport
  deleteRequest(id: ID): RequestExport

  createBeefroom(roomname: String): Beefroom

  createShelf(shelfname: String, beefroom: String): Shelf

  createtypekeep(
    totalbeef: String
    beeftype: String
    beefroom: String
    shelf: String
  ): Typekeep

  createChillday(day: String): Chillday

  createBasket(beefroom: String, shelf: String, basketname: String): Basket

  createExpdatesetting(totalday: String): ExpdateSetting

  createTotalExp(totalday: String): TotalExpdate
  updateTotalExph(totalday: String): Imhalve
  updateTotalExpq(totalday: String): Imquarter
  updateTotalExpl(totalday: String): Imlump
  updateTotalExpc(totalday: String): Imchop
  updateTotalExpe(totalday: String): Imentrail

  deleteBeefroom(id: ID): Beefroom
  deleteShelf(id: ID): Shelf
  deleteBasket(id: ID): Basket
  deleteChillroom(id: ID): Chillroom
  deleteChillday(id: ID): Chillday

  uppdatetypekeep(id: ID, totalbeef: String): Typekeep

  deletetypekeep(id: ID): Typekeep

  updateBeefroom(id: ID, roomname: String): Beefroom
  updateBasket(id: ID, basketname: String): Basket


  #//////////////////////////////////////////////////////////////
  createProducttype(
    code: String!
    nameTH: String!
    nameEN: String!
    BBE: Int
    unit: String
  ): Producttype

  updateProducttype(
    id: ID!
    code: String
    nameTH: String
    nameEN: String
    BBE: Int
  ): Producttype

  deleteProducttype(id: ID): Producttype

  createUnit(name: String): Unit
  createBeefproduct(
    weight: String
    producttype: String
  ): Beefproduct
  createProductstore: ProductStore

  updateBeefProduct(
    id: ID!
    lump: String
    chop: String
  ):Beefproduct
}

scalar Date

type Datacow {
  id: ID!
  numcow: String!
  numkun: String!
  # pun: String!
  # numfarmer: String!
  # passport: String
  # teeth: String!
  # rfid: String
  # bodyscore: String!
  # namefarmer: String!
  # date: Date!
  # datebirhtday:Date!
  # namecow: String!
  # sex: String!
  # weightstart: Float
  # weightbirht: Float
  # weight: Float
  # price: Float
  # grade: String!
  # fees: Float
  # importDate: Date
  # importslaughterDate: Date
  datatreats: [Datatreat]
}
type Datatreat {
  id: ID!
  weight: String!
  detail: String!
  datacow: Datacow!
}

type Importcowfarm {
  id: ID!
  pun: String
  numfarmer: String
  passport: String
  teeth: String
  bodyscore: String
  namefarmer: String
  date: Date!
  datebirhtday: Date
  namecow: String
  sex: String
  weightstart: String
  weightbirht: String
  imagecow: String
  district: String
  province: String
  amphur: String
  zipcode: String
  statusIm: Status!

  user: User!
}
type User {
  id: ID!
  name: String!
  email: String!
  passsport: String!
  numaccount: String!
  district: String!
  province: String!
  amphur: String!
  zipcode: String!
  products: [Product]
  carts: [CartItem]!
  createdAt: Date!
  role: Role
  statuses: [Status]
  imslaughters: [Imslaughter]
  halves: [Halve]
  quarters: [Quarter]
  lumps: [Lump]
  chops: [Chop]
  entrails: [Entrail]
  importcowfarms: [Importcowfarm]
  imhalves: [Imhalve]
  imquarters: [Imquarter]
  imlumps: [Imlump]
  imchops: [Imchop]
  imentrails: [Imentrail]
  beefproduct: [Beefproduct]
}

type Role {
  id: ID!
  nameTH: String!
  nameEN: String!
}

type Product {
  id: ID!
  description: String!
  price: Float!
  imageUrl: String!
  user: User!
  createdAt: Date!
}

type CartItem {
  id: ID!
  product: Product!
  quantity: Int!
  user: User!
  createdAt: Date!
}

type AuthData {
  user: User
  jwt: String
}

type Message {
  message: String!
}

type Box {
  id: ID!
  name: String!
  count: Int!
}
type Box2 {
  id: ID!
  name: String!
}

type Feed {
  id: ID!
  datestart: Date!
  dateend: Date!
  typefood: String!
  namefood: String!
  namecop: String
  cp: Float
  tdn: Float
  quantity: Float!
  note: String
  imslaughter: Imslaughter!
}

type Treat {
  id: ID!
  datet: Date!
  dise: String!
  symptom: String!
  medi: String!
  nofity: Int
  quantity: Float!
  note: String
  imslaughter: Imslaughter!
}

type Transport {
  id: ID!
  date: Date!
  name: String!
  place: String!
  note: String
  chop: Chop
  lump: Lump
  quarter: Quarter
  halve: Halve
}

type Drug {
  id: ID!
  name: String!
  nofity: Int
  dateStop: Int
}

type Dayslaugh {
  id: ID!
  year: Int
  month: Int
  weight: Float
}
type Disease {
  id: ID!
  name: String!
  detail: String!
}

# งานจริงๆ
type Setting {
  id: ID!
  dateResetCount: Int!
  dateResetCountH: Int!
  dateResetCountQ: Int!
  dateResetCountL: Int!
  dateResetCountC: Int!
  dateResetCountE: Int!
  dateResetCountP: Int!
}
type SettingMedi {
  id: ID!
  name: String
  dateStop: Float
}

type Status {
  id: ID!
  """
  รหัสค้นหา
  """
  code: String!
  nameTH: String!
  nameEN: String!
  user: User!
}
type Foodset {
  id: ID!
  name: String
  CP: Float
  TDN: Float
  type: String
}

type Beeftype {
  id: ID!
  """
  รหัสค้นหา
  """
  code: String!
  nameTH: String!
  nameEN: String!
  BBE: Int
  codecount: Int
  priceG2h: Float
  priceG3: Float
  priceG3h: Float
  priceG4: Float
  priceG4h: Float
  priceG5: Float
}

type PunType {
  id: ID!
  name: String!
  numpun: String!
}
type Imslaughter {
  id: ID!
  numcow: String!
  imagecow: String
  numkun: String!
  pun: String!
  numfarmer: String!
  passport: String
  teeth: String
  rfid: String
  bodyscore: String
  namefarmer: String!
  date: Date!
  datebirhtday: Date!
  namecow: String!
  sex: String!
  weightstart: Float!
  weightbirht: Float!
  statuscow: String
  weight: Float
  price: Float
  grade: String
  fees: Float
  "ข้อมูลติดตัวโค"
  group: String!
  district: String!
  province: String!
  """
  วันรับเข้า
  """
  importDate: Date
  """
  วันเชือด
  """
  importslaughterDate: Date
  """
  สถานะรับเข้า
  """
  statusIm: Status!
  """
  สถานะซาก2
  """
  statusCa: Status!
  """
  สถานะเครื่องใน
  """
  importDateDead: Date
  notedead: String
  statusEn: Status!
  user: User!
  halves: [Halve]
  quarters: [Quarter]
  lumps: [Lump]
  chops: [Chop]
  entrails: Entrail
  feeds: [Feed]
  treats: [Treat]
}

type Halve {
  id: ID!
  weightwarm: Float!
  weightcool: Float
  barcode: String
  createdAt: Date!
  sendAt: Date
  status: Status!
  user: User!
  imslaughter: Imslaughter!
  beeftype: Beeftype!
  quarters: [Quarter]
  transports: [Transport]
  chill: [Chill]
}

type Quarter {
  id: ID!
  weight: Float!
  price: Float
  barcode: String
  createdAt: Date!
  sendAt: Date
  status: Status!
  user: User!
  imslaughter: Imslaughter!
  beeftype: Beeftype!
  halve: Halve!
  lumps: [Lump]
  transports: [Transport]
}

type Lump {
  id: ID!
  weight: Float!
  price: Float
  barcode: String
  createdAt: Date!
  sendAt: Date
  status: Status!
  user: User!
  imslaughter: Imslaughter!
  beeftype: Beeftype!
  quarter: Quarter!
  chops: [Chop]
  transports: [Transport]
}

type Chop {
  id: ID!
  weight: Float!
  price: Float
  barcode: String
  createdAt: Date!
  MFG: Date!
  BBE: Date!
  status: Status!
  user: User!
  imslaughter: Imslaughter!
  beeftype: Beeftype!
  lump: Lump!
  transports: [Transport]
}

type Entrail {
  id: ID!
  offal: String!
  toe: String!
  head: String!
  skin: String!
  liver: String!
  fat: String!
  onkale: String!
  tail: String!
  gallbladder: String!
  scrap: String!
  barcode: String
  createdAt: Date!
  user: User!
  imslaughter: Imslaughter!
}

type Tracking {
  barcode: String
  beeftype: String
  grade: String
  weight: Float
  price: Float
  MFG: Date
  BBE: Date
  farmer: String
  numcow: String
  numkun: String
  pun: String
  age: String
  weightcow: Float
  transports: [Transport]
}

type Ad_provinces {
  province_id: String
  province_code: String
  province_name: String
  province_name_eng: String
  geo_id: String
}

type Ad_amphures {
  amphur_id: String
  amphur_code: String
  amphur_name: String
  amphur_name_eng: String
  geo_id: String
  province_id: String
}

type Ad_districts {
  district_id: String
  district_code: String
  district_name: String
  district_name_eng: String
  geo_id: String
  province_id: String
  amphur_id: String
}

type Ad_zipcodes {
  zipcode_id: String
  district_code: String
  zipcode_name: String
}

type Ad_geography {
  geo_id: String
  geo_name: String
}

type Imhalve {
  id: ID
  importdate: Date!
  user: User!
  beeftype: Beeftype
  halve: Halve
  barcode: String
  beefstore: String
  storestatus: Status
  exportdate: Date!
  name: String
  namefarmer: String
  userName: String
  beefroom: Beefroom
  exporter: String
  Expdate: Date
}

type Imquarter {
  id: ID
  importdate: Date!
  user: User!
  beeftype: Beeftype
  quarter: Quarter
  barcode: String
  beefstore: String
  storestatus: Status
  exportdate: Date!
  name: String
  namefarmer: String
  userName: String
  beefroom: Beefroom
  exporter: String
  Expdate: Date
}

type Imlump {
  id: ID
  importdate: Date!
  user: User
  beeftype: Beeftype
  lump: Lump
  barcode: String
  beefstore: String
  storestatus: Status
  exportdate: Date!
  name: String
  namefarmer: String
  userName: String
  beefroom: Beefroom
  shelf: Shelf
  basket: String
  exporter: String
  Expdate: Date
}

type Imchop {
  id: ID
  importdate: Date!
  user: User
  beeftype: Beeftype
  chop: Chop
  barcode: String
  beefstore: String
  storestatus: Status
  exportdate: Date!
  name: String
  namefarmer: String
  userName: String
  beefroom: Beefroom
  shelf: Shelf
  basket: String
  exporter: String
  Expdate: Date
}

type Imentrail {
  id: ID
  importdate: Date!
  user: User
  entrail: Entrail
  barcode: String
  beefstore: String
  storestatus: Status
  exportdate: Date!
  name: String
  namefarmer: String
  userName: String
  beefroom: Beefroom
  exporter: String
  Expdate: Date
}

type Chill {
  id: ID
  chilldateStart: Date
  chilldateEnd: Date
  chillroom: Chillroom
  user: User
  halve: Halve
  barcode: String
  chillstatus: Status
  beeftype: Beeftype
  chillday: Chillday
}

type Chillroom {
  id: ID
  roomnum: String
}

type Chillday {
  id: ID
  day: String
}

type BeefStore {
  id: ID
  imhalves: [Imhalve]
  imquarters: [Imquarter]
  imlumps: [Imlump]
  imchops: [Imchop]
}

type EntrailStore {
  id: ID
  imentrails: [Imentrail]
}

type List {
  id: String
  barcode: String
  status: String
  cownum: String
  beeftype: String
  code: String
  weightwarm: Float
  weight: Float
  importdate: Date
  namefarmer: String
  beefroom: String
  shelf: String
  basket: String
  beeftypeid: String
}

type EntrailList {
  id: String
  barcode: String
  cownum: String
  importdate: Date
  namefarmer: String
  offal: String
  toe: String
  head: String
  skin: String
  liver: String
  fat: String
  onkale: String
  tail: String
  gallbladder: String
  scrap: String
  beefroom: String
}

type importList {
  id: String
  barcode: String
  storestatus: String
  cownum: String
  beeftype: String
  code: String
  weightwarm: Float
  weight: Float
  importdate: Date
  namefarmer: String
}

type exportList {
  id: String
  barcode: String
  storestatus: String
  cownum: String
  beeftype: String
  code: String
  weightwarm: Float
  weight: Float
  exportdate: Date
  namefarmer: String
}

type Beefroom {
  id: ID!
  roomname: String
  typekeep: [Typekeep]
  roomstatus: Status
  shelf: [Shelf]
  halve: [Halve]
  quarter: [Quarter]
  lump: [Lump]
  chop: [Chop]
  entrail: [Entrail]
  basket: [Basket]
}

type Shelf {
  id: ID!
  shelfname: String
  beefroom: Beefroom
  typekeep: [Typekeep]
  lump: [Lump]
  chop: [Chop]
  basket: [Basket]
}

type Basket {
  id: ID!
  basketname: String
  shelf: Shelf
  beefroom: Beefroom
}

type Typekeep {
  id: ID!
  totalbeef: String
  beeftype: Beeftype
  beefroom: Beefroom
  shelf: Shelf
}

type RequestExport {
  id: ID!
  name: String
  beeftype: Beeftype
  quantity: String
  requestdate: Date
}

type ExpdateSetting {
  id: ID
  totalday: String
}

type TotalExpdate {
  id: ID
  totalday: String
}

type Producttype {
  id: ID
  code: String!
  nameTH: String!
  nameEN: String!
  BBE: Int
  unit: Unit
}

type Unit {
  id: ID
  name: String
}

type Beefproduct {
  id: ID
  weight: String
  barcode: String
  MFG: Date
  BBE: Date
  status: Status
  producttype: Producttype
  chop: [Chop]
  lump: [Lump]
}

type ProductStore{
  id: ID
  beefproduct: [Beefproduct]
}

type Improduct{
  id: ID
  user: User!
  beefproduct: Producttype
  barcode: String
  importdate: Date
  exportdate: Date
  producttype: Producttype
  Expdate: Date
}